{"remainingRequest":"/Users/proudsmart006/Desktop/workPlace/vue3.0-quickStart/node_modules/babel-loader/lib/index.js!/Users/proudsmart006/Desktop/workPlace/vue3.0-quickStart/src/http/index.js","dependencies":[{"path":"/Users/proudsmart006/Desktop/workPlace/vue3.0-quickStart/src/http/index.js","mtime":1603788207654},{"path":"/Users/proudsmart006/Desktop/workPlace/vue3.0-quickStart/node_modules/cache-loader/dist/cjs.js","mtime":1603788265128},{"path":"/Users/proudsmart006/Desktop/workPlace/vue3.0-quickStart/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\n\n/* eslint-disable */\nimport axios from 'axios';\nimport router from 'vue-router';\nimport Cookies from 'js-cookie';\nimport store from '../store';\n/**\n* 定义请求常量\n* TIME_OUT、ERR_OK\n*/\n// export const TIME_OUT = 300000;    // 请求超时时间\n\nexport var ERR_OK = true; // 请求成功返回状态，字段和后台统一\n// export const baseUrl = process.env.BASE_URL   // 引入全局url，定义在全局变量process.env中，开发环境为了方便转发，值为空字符串\n// 环境的切换\n// console.log('process.env.NODE_ENV:'+process.env.NODE_ENV);\n\naxios.defaults.baseURL = process.env.baseUrl; // 请求超时时间\n// axios.defaults.timeout = TIME_OUT\n// 封装请求拦截\n\naxios.interceptors.request.use(function (config) {\n  config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n  config.headers['accessToken'] = '';\n\n  if (Cookies.getJSON('loginMsg')) {\n    config.headers['accessToken'] = Cookies.getJSON('loginMsg').token;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // 封装响应拦截，判断token是否过期\n\naxios.interceptors.response.use(function (response) {\n  var data = response.data;\n\n  if (data.responseCode === 202) {\n    // 如果后台返回的错误标识为token过期，则重新登录\n    // token过期移除token\n    Cookies.remove('loginMsg');\n    Cookies.remove('resumeId'); // 进行重新登录操作\n  } else {\n    return Promise.resolve(data);\n  }\n}, function (error) {\n  return Promise.reject(error.response);\n\n  if (error.response.status) {\n    switch (error.response.status) {\n      // 401: 未登录\n      // 未登录则跳转登录页面，并携带当前页面的路径\n      // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n      case 401:\n        router.replace({\n          path: '/login',\n          query: {\n            redirect: router.currentRoute.fullPath\n          }\n        });\n        break;\n      // 403 token过期\n      // 登录过期对用户进行提示\n      // 清除本地token和清空vuex中token对象\n      // 跳转登录页面                \n\n      case 403:\n        // var toast = Toast.$create({\n        //     txt: '登录过期，请重新登录',\n        //     mask: true\n        // })\n        // toast.show()\n        // 清除token\n        localStorage.removeItem('token');\n        store.commit('loginSuccess', null); // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 \n\n        setTimeout(function () {\n          router.replace({\n            path: '/login',\n            query: {\n              redirect: router.currentRoute.fullPath\n            }\n          });\n        }, 1000);\n        break;\n      // 404请求不存在\n\n      case 404:\n        // var toast = Toast.$create({\n        //     txt: '网络请求不存在',\n        //     mask: true\n        // })\n        // toast.show()\n        break;\n      // 其他错误，直接抛出错误提示\n\n      default: // var toast = Toast.$create({\n      //     txt: error.response.data.message,\n      //     mask: true\n      // })\n      // toast.show()\n\n    }\n  }\n\n  return Promise.reject(error.response);\n});\nexport default axios;",{"version":3,"sources":["/Users/proudsmart006/Desktop/workPlace/vue3.0-quickStart/src/http/index.js"],"names":["axios","router","Cookies","store","ERR_OK","defaults","baseURL","process","env","baseUrl","interceptors","request","use","config","headers","getJSON","token","Promise","reject","error","response","data","responseCode","remove","resolve","status","replace","path","query","redirect","currentRoute","fullPath","localStorage","removeItem","commit","setTimeout"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA;;;;AAIA;;AACA,OAAO,IAAMC,SAAS,IAAf,C,CAA0B;AACjC;AACA;AACA;;AACAJ,MAAMK,QAAN,CAAeC,OAAf,GAAyBC,QAAQC,GAAR,CAAYC,OAArC,C,CACA;AACA;AAEA;;AACAT,MAAMU,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,kBAAU;AACNC,SAAOC,OAAP,CAAe,cAAf,IAAiC,gCAAjC;AACAD,SAAOC,OAAP,CAAe,aAAf,IAAgC,EAAhC;;AACA,MAAGZ,QAAQa,OAAR,CAAgB,UAAhB,CAAH,EAA+B;AAC3BF,WAAOC,OAAP,CAAe,aAAf,IAAgCZ,QAAQa,OAAR,CAAgB,UAAhB,EAA4BC,KAA5D;AACH;;AACD,SAAOH,MAAP;AACH,CARL,EASI,iBAAS;AACL,SAAOI,QAAQC,MAAR,CAAeC,KAAf,CAAP;AACH,CAXL,E,CAaA;;AACAnB,MAAMU,YAAN,CAAmBU,QAAnB,CAA4BR,GAA5B,CACI,oBAAY;AAAA,MACHS,IADG,GACKD,QADL,CACHC,IADG;;AAER,MAAIA,KAAKC,YAAL,KAAsB,GAA1B,EAA+B;AAAK;AAChC;AACApB,YAAQqB,MAAR,CAAe,UAAf;AACArB,YAAQqB,MAAR,CAAe,UAAf,EAH2B,CAI/B;AACC,GALD,MAKO;AACH,WAAON,QAAQO,OAAR,CAAgBH,IAAhB,CAAP;AACH;AACJ,CAXL,EAYI,iBAAS;AACL,SAAOJ,QAAQC,MAAR,CAAeC,MAAMC,QAArB,CAAP;;AACA,MAAID,MAAMC,QAAN,CAAeK,MAAnB,EAA2B;AACvB,YAAQN,MAAMC,QAAN,CAAeK,MAAvB;AACI;AACA;AACA;AACA,WAAK,GAAL;AACIxB,eAAOyB,OAAP,CAAe;AACXC,gBAAM,QADK;AAEXC,iBAAO;AACHC,sBAAU5B,OAAO6B,YAAP,CAAoBC;AAD3B;AAFI,SAAf;AAMA;AACJ;AACA;AACA;AACA;;AACA,WAAK,GAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACAC,qBAAaC,UAAb,CAAwB,OAAxB;AACA9B,cAAM+B,MAAN,CAAa,cAAb,EAA6B,IAA7B,EARJ,CASI;;AACAC,mBAAW,YAAM;AACblC,iBAAOyB,OAAP,CAAe;AACXC,kBAAM,QADK;AAEXC,mBAAO;AACHC,wBAAU5B,OAAO6B,YAAP,CAAoBC;AAD3B;AAFI,WAAf;AAMH,SAPD,EAOG,IAPH;AAQA;AAEJ;;AACA,WAAK,GAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACJ;;AACA,cA7CJ,CA8CQ;AACA;AACA;AACA;AACA;;AAlDR;AAoDH;;AACD,SAAOd,QAAQC,MAAR,CAAeC,MAAMC,QAArB,CAAP;AACL,CArEH;AAuEA,eAAepB,KAAf","sourcesContent":["/* eslint-disable */\nimport axios from 'axios'\nimport router from 'vue-router' \nimport Cookies from 'js-cookie'\nimport store from '../store'\n/**\n* 定义请求常量\n* TIME_OUT、ERR_OK\n*/\n// export const TIME_OUT = 300000;    // 请求超时时间\nexport const ERR_OK = true;      // 请求成功返回状态，字段和后台统一\n// export const baseUrl = process.env.BASE_URL   // 引入全局url，定义在全局变量process.env中，开发环境为了方便转发，值为空字符串\n// 环境的切换\n// console.log('process.env.NODE_ENV:'+process.env.NODE_ENV);\naxios.defaults.baseURL = process.env.baseUrl\n// 请求超时时间\n// axios.defaults.timeout = TIME_OUT\n\n// 封装请求拦截\naxios.interceptors.request.use(\n    config => {\n        config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n        config.headers['accessToken'] = '';\n        if(Cookies.getJSON('loginMsg')){\n            config.headers['accessToken'] = Cookies.getJSON('loginMsg').token\n        }\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n// 封装响应拦截，判断token是否过期\naxios.interceptors.response.use(\n    response => {\n        let {data} = response\n        if (data.responseCode === 202) {    // 如果后台返回的错误标识为token过期，则重新登录\n            // token过期移除token\n            Cookies.remove('loginMsg')\n            Cookies.remove('resumeId')\n        // 进行重新登录操作\n        } else {\n            return Promise.resolve(data)\n        }\n    },\n    error => {\n        return Promise.reject(error.response)\n        if (error.response.status) { \n            switch (error.response.status) {                \n                // 401: 未登录\n                // 未登录则跳转登录页面，并携带当前页面的路径\n                // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n                case 401:                    \n                    router.replace({                        \n                        path: '/login',                        \n                        query: { \n                            redirect: router.currentRoute.fullPath \n                        }\n                    });\n                    break;\n                // 403 token过期\n                // 登录过期对用户进行提示\n                // 清除本地token和清空vuex中token对象\n                // 跳转登录页面                \n                case 403:\n                    // var toast = Toast.$create({\n                    //     txt: '登录过期，请重新登录',\n                    //     mask: true\n                    // })\n                    // toast.show()\n                    // 清除token\n                    localStorage.removeItem('token');\n                    store.commit('loginSuccess', null);\n                    // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 \n                    setTimeout(() => {                        \n                        router.replace({                            \n                            path: '/login',                            \n                            query: { \n                                redirect: router.currentRoute.fullPath \n                            }                        \n                        });                    \n                    }, 1000);                    \n                    break; \n\n                // 404请求不存在\n                case 404:\n                    // var toast = Toast.$create({\n                    //     txt: '网络请求不存在',\n                    //     mask: true\n                    // })\n                    // toast.show()\n                    break;\n                // 其他错误，直接抛出错误提示\n                default:\n                    // var toast = Toast.$create({\n                    //     txt: error.response.data.message,\n                    //     mask: true\n                    // })\n                    // toast.show()\n            }\n        }\n        return Promise.reject(error.response)\n  }\n)\nexport default axios "]}]}